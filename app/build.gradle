apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner testInstrumentationRunner
        multiDexEnabled true
        buildConfigField('boolean', 'isShowLoaCat', "false")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        buildConfigField("boolean", "LOG", "true")
    }
    buildTypes {
        release {
            // true - 打开混淆
            minifyEnabled true
            // true - 打开资源压缩
            shrinkResources true
            // 用于设置Proguard的规划路径；
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("boolean", "LOG", "false")
        }
    }


    //buildToolsVersion '27.0.3'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependencies.appcompat
    implementation rootProject.ext.dependencies.constraintlayout
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation rootProject.ext.dependencies.junit
    androidTestImplementation rootProject.ext.dependencies.runner
    androidTestImplementation rootProject.ext.dependencies.espresso

    implementation rootProject.ext.dependencies.async
    implementation rootProject.ext.dependencies.butterknife
    annotationProcessor rootProject.ext.dependencies.butterknife_compiler

    implementation rootProject.ext.dependencies.recyclerview
    implementation rootProject.ext.dependencies.legacy

    //room
    implementation rootProject.ext.dependencies.room_runtime
    annotationProcessor rootProject.ext.dependencies.room_compiler // use kapt for Kotlin
    // optional - RxJava support for Room
    implementation rootProject.ext.dependencies.room_rxjava2
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation rootProject.ext.dependencies.room_guava

    // Test helpers
    testImplementation rootProject.ext.dependencies.room_testing
    implementation rootProject.ext.dependencies.rxandroid
    implementation rootProject.ext.dependencies.retrofit
    // 衔接 Retrofit & RxJava
    // 此处一定要注意使用RxJava2的版本
    implementation rootProject.ext.dependencies.retrofit2_rxjava2_adapter
    // 支持Gson解析
    implementation rootProject.ext.dependencies.converter_gson
    implementation rootProject.ext.dependencies.rxbinding


    implementation rootProject.ext.dependencies.lottie
    implementation rootProject.ext.dependencies.lifecycle_extensions
    implementation rootProject.ext.dependencies.material

    //okhttp
    implementation rootProject.ext.dependencies.okhttp

    //eventbus
    implementation rootProject.ext.dependencies.eventbus

    //glide
    implementation rootProject.ext.dependencies.glide
    annotationProcessor rootProject.ext.dependencies.glide_compiler

    implementation rootProject.ext.dependencies.multidex

    //leakcanary
    debugImplementation rootProject.ext.dependencies.leakcanary_android

    implementation rootProject.ext.dependencies.BaseAdapter

    //alibaba arouter
    implementation rootProject.ext.dependencies.arouter
    annotationProcessor rootProject.ext.dependencies.arouter_compiler


    implementation rootProject.ext.dependencies.colorpickerview

    implementation project(path: ':datePicker')
    if (!rootProject.ext.isModule) {
        implementation project(path: ':module_customview')
        implementation project(path: ':module_communication')
        implementation project(path: ':module_architecture')
        implementation project(path: ':module_basis')
    }
    implementation project(path: ':common')

}
